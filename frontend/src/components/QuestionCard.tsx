import { IconBrandRedux, IconQuote, IconQuotes } from "@tabler/icons-react";

interface QuestionCardProps {
  questionNum: number;
  totalQuestionNum: number;
  prompt: string[];
  promptReadIndex: number;
  tags: string[];
  className?: string;
}

export default function QuestionCardTail({
  className,
  questionNum,
  totalQuestionNum,
  prompt,
  promptReadIndex,
  tags,
}: QuestionCardProps) {
  return (
    <div
      className={`shadow-md border-gray-100 border container p-6 max-w-lg rounded-lg flex flex-col gap-3 ${className}`}
    >
      <div className="flex justify-between items-end">
        <div className="font-bold">
          <h1 className="inline text-4xl text-gray-800">
            Q{questionNum}&nbsp;
          </h1>
          <h2 className="inline text-xl text-gray-500">
            of {totalQuestionNum}
          </h2>
        </div>
        <p className="text-sm italic text-gray-500 mr-2">generated by AI</p>
      </div>
      <hr className="-mx-6 border-y-2 border-blue-500" />
      <div className="flex gap-2">
        {tags.map((tag) => (
          <Badge key={tag}>{tag}</Badge>
        ))}
      </div>
      <div className="flex gap-4 mb-4">
        <IconQuote className="h-12 w-12 shrink-0 text-gray-500 rotate-180" />
        <ReadingWords
          className="mt-4 mr-4"
          words={prompt}
          wordsReadIndex={promptReadIndex}
        />
      </div>
      <button className="place-self-end text-sm text-blue-500 font-medium py-0.5 px-2.5 rounded hover:bg-blue-100 active:translate-y-0.5">
        Skip question
      </button>
    </div>
  );
}

interface BadgeProps {
  className?: string;
  children: React.ReactNode;
}
function Badge({ children, className }: BadgeProps) {
  return (
    <span
      className={`rounded-full py-0.5 px-2.5 text-xs bg-blue-100 text-blue-500 tracking-wide font-semibold uppercase ${className}`}
    >
      {children}
    </span>
  );
}

interface ReadingWordsProps {
  words: string[];
  wordsReadIndex: number;
  className: string;
}
function ReadingWords({ className, words, wordsReadIndex }: ReadingWordsProps) {
  const wordElements = words.map((word, index) => {
    let colorClasses = "text-gray-500 transition";
    if (wordsReadIndex == index) {
      colorClasses = "text-violet-500";
    } else if (wordsReadIndex > index) {
      colorClasses = "text-gray-800 transition";
    }
    return (
      <span key={index} className={`text-2xl font-semibold ${colorClasses}`}>
        {word}&nbsp;
      </span>
    );
  });
  return <div className={`flex flex-wrap ${className} `}>{wordElements}</div>;
}
