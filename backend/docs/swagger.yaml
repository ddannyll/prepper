definitions:
  ApplicationCreateBody:
    properties:
      description:
        example: SafetyCulture is an Australian-based global technology company that
          specialises in building inspection apps for the web and mobile devices.
        type: string
      icon:
        description: icon link?
        example: https://www.safetyculture.com/wp-content/uploads/2020/10/safetyculture-logo.svg
        type: string
      jobDescription:
        example: Looking for an engineer to join our team.
        type: string
      name:
        example: SafetyCulture
        type: string
    required:
    - jobDescription
    - name
    type: object
  ApplicationCreateResponse:
    properties:
      createdAt:
        example: "2021-07-01T00:00:00.000Z"
        type: string
      description:
        example: SafetyCulture is an Australian-based global technology company that
          specialises in building inspection apps for the web and mobile devices.
        type: string
      icon:
        example: https://www.safetyculture.com/wp-content/uploads/2020/10/safetyculture-logo.svg
        type: string
      id:
        example: "1337"
        type: string
      jobDescription:
        example: Looking for an engineer to join our team.
        type: string
      name:
        example: SafetyCulture
        type: string
    required:
    - jobDescription
    - name
    type: object
  UserCredentials:
    properties:
      password:
        example: daniel321
        minLength: 6
        type: string
      username:
        example: daniel
        type: string
    required:
    - password
    - username
    type: object
  UserSigninResponse:
    properties:
      access_token:
        type: string
      id:
        example: "1337"
        type: string
    type: object
  applicationQuestionsBody:
    properties:
      id:
        example: "1337"
        type: string
      numberQuestions:
        example: 5
        type: integer
    type: object
  applicationQuestionsSuccessResponse:
    type: object
  handlers.AnalysisRequest:
    properties:
      answer:
        type: string
      question:
        type: string
    type: object
  service.Analysis:
    properties:
      bad:
        items:
          type: string
        type: array
      good:
        items:
          type: string
        type: array
    type: object
  service.Voice2TextResponse:
    properties:
      text:
        type: string
    type: object
info:
  contact: {}
  description: Backend API sepcifications for prepper
  title: prepper API
  version: "0.1"
paths:
  /ai/analyse:
    post:
      consumes:
      - application/json
      parameters:
      - description: Question and Answer to be analysed by AI
        in: body
        name: QAPair
        required: true
        schema:
          $ref: '#/definitions/handlers.AnalysisRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Analysis'
      summary: analyse an answer to a question
      tags:
      - ai
  /ai/voice2text:
    post:
      consumes:
      - application/octet-stream
      description: The API endpoint expects an audio file in audio/webm format to
        be provided in the request body as a blob.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Voice2TextResponse'
      summary: convert voice to text
      tags:
      - ai
  /application/create:
    post:
      consumes:
      - application/json
      description: an application has some properties
      parameters:
      - description: Application
        in: body
        name: ApplicationCreateBody
        required: true
        schema:
          $ref: '#/definitions/ApplicationCreateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApplicationCreateResponse'
      summary: Create an application for the user
      tags:
      - application
  /application/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Get user's applications
      tags:
      - application
  /application/questions:
    post:
      consumes:
      - application/json
      description: an application has some properties
      parameters:
      - description: Application
        in: body
        name: applicationQuestionsBody
        required: true
        schema:
          $ref: '#/definitions/applicationQuestionsBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/applicationQuestionsSuccessResponse'
      summary: Get questoins for the user
      tags:
      - application
  /ping:
    get:
      consumes:
      - application/json
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Ping the server
      tags:
      - ping
  /user/healthcheck:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: 'if signed in `{"success": true}`'
        "401":
          description: if not signed in
      summary: Check if a user is signed in
      tags:
      - user
  /user/signin:
    post:
      consumes:
      - application/json
      parameters:
      - description: Password must be atleast 6 characters.
        in: body
        name: SignInBody
        required: true
        schema:
          $ref: '#/definitions/UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserSigninResponse'
        "401":
          description: Invalid Credentials
      summary: Sign a user
      tags:
      - user
  /user/signout:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: on successful signout
      summary: Sign a user out of dancord
      tags:
      - user
  /user/signup:
    post:
      consumes:
      - application/json
      description: Insert description here
      parameters:
      - description: Password must be atleast 6 characters.
        in: body
        name: SignUpBody
        required: true
        schema:
          $ref: '#/definitions/UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserSigninResponse'
      summary: Sign a user up to dancord
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
